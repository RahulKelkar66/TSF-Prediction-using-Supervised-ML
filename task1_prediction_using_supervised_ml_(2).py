# -*- coding: utf-8 -*-
"""Task1_Prediction_using_Supervised_ML (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13pPt60rM2_u42WO1pLL_dbT4CGUXcU4I
"""



"""# **Name:- Rahul Kelkar**
# **Data Science & Business Analytics Intern at The Sparks Foundation**
# **Batch:- June21**
# **Task 1: Prediction using Supervised ML**

---Linear Regression with Python Scikit Learn---

In this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.

---Problem statement---

In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.

--To Predict--

What will be predicted score if a student studies for 9.25 hrs/ day?
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
# %matplotlib inline
import matplotlib.pyplot as plt

"""Loading Dataset"""

url= "http://bit.ly/w-data "
data=pd.read_csv(url)
df=data
print("***** Data imported successfully! *****")
data #Displaying the data

***** Data imported successfully! *****
Hours	Scores
0	2.5	21
1	5.1	47
2	3.2	27
3	8.5	75
4	3.5	30
5	1.5	20
6	9.2	88
7	5.5	60
8	8.3	81
9	2.7	25
10	7.7	85
11	5.9	62
12	4.5	41
13	3.3	42
14	1.1	17
15	8.9	95
16	2.5	30
17	1.9	24
18	6.1	67
19	7.4	69
20	2.7	30
21	4.8	54
22	3.8	35
23	6.9	76
24	7.8	86

df.head()

df.describe()

"""# **Checking Null Values**"""

df.isnull().sum()

"""No Null values found, so no need to clean this data

# **Plotting the distribution of scores**
"""

plt.scatter(df['Hours'], df['Scores'], color = 'red')
plt.title('Hours vs Percentage(%)')
plt.xlabel('Hours Studied')
plt.ylabel("Percentage Score(%)")
plt.show()

"""# **Linear Regression model - Preparing the data and splitting it in testing**"""

# Dividing the data into attributes and labels.
x = df.iloc[:, :-1].values
y = df.iloc[:, 1].values

"""# **Splitting the data into Training and Testing Sets**"""

# Using in-built method of sci-kit learn of train_test_split()
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

"""# **Training the model**"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(x_train, y_train)
print("Model Trained!")

"""# **Plotting the Regression Line**"""

# Plotting the regression line # formula for line is y=m*x + c
line = model.coef_*x + model.intercept_
plt.scatter(x, y, color = 'red')
plt.plot(x, line)
plt.show()

"""# **Making Predictions**"""

#Predicting scores for model
print(x_test)
y_pred = model.predict(x_test)

"""# **Comparing Actual vs Predicted**"""

df1 = pd.DataFrame({'Actual' : y_test, 'Predicted' : y_pred})
df1

#Checking the accuracy of training and test scores
print('Test Score')
print(model.score(x_test, y_test))
print('Training Score')
print(model.score(x_train, y_train))

"""# **Testing with custom data**"""

hrs = [[9.25]]
predict = model.predict(hrs)
print("No. of Hours = {}".format(hrs))
print("Predicted Score = {}".format(predict[0]))

"""# **Evaluating the Model**"""

from sklearn import metrics
print('Mean Absolute Error(MAE) :', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error(MSE) :', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error(RMSE) :', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))